2020-05-20                                                                  v1.0



                      EEEEE  PPPPP   II   CCCC      0000
                      EE     PP  PP  II  CC  CC    00  00
                      EEEEE  PPPPP   II  CC        00  00
                      EE     PP      II  CC  CC    00  00
                      EEEEE  PP      II   CCCC      0000

                            ARCHITECTURE REFERENCE




================================================================================
 CPU REGISTERS
================================================================================

The EPIC processor has a total of 18 registers. Of these 16 are general purpose
registers, including the instruction pointer.
// TODO: CPU registers.

All registers are 32 bits wide.

--------------------------------------------------------------------------------
 GENERAL PURPOSE REGISTERS
--------------------------------------------------------------------------------

The general purpose registers a directly accessible to the programmer and serve
as storage locations for immediate computations. They are addressed by their
mnemonics r0 to r15.
Because of their special roles r13, r14 and r15 have alternative names sp, rp
and ip respectively.
Register r15 (ip) is the instruction pointer. Writing to this register will
alter the program execution flow.

       Bits    | Mn. | Alt. | Role
      ---------+-----+------+-------------------------------------------
       0 0 0 0 | r0  |      |
       0 0 0 1 | r1  |      |
       0 0 1 0 | r2  |      |
       0 0 1 1 | r3  |      |
       0 1 0 0 | r4  |      |
       0 1 0 1 | r5  |      |
       0 1 1 0 | r6  |      |
       0 1 1 1 | r7  |      |
       1 0 0 0 | r8  |      |
       1 0 0 1 | r9  |      |
       1 0 1 0 | r10 |      |
       1 0 1 1 | r11 |      |
       1 1 0 0 | r12 |      |
      ---------+-----+------+-------------------------------------------
       1 1 0 1 | r13 | sp   | stack pointer
       1 1 1 0 | r14 | rp   | return pointer
       1 1 1 1 | r15 | ip   | instruction pointer

--------------------------------------------------------------------------------
 SPECIAL CPU REGISTERS
--------------------------------------------------------------------------------

       Bits    | Mn. | Alt. | Role
      ---------+-----+------+-------------------------------------------
       0 0 0 0 | cir |      | CPU information register
      ---------+-----+------+-------------------------------------------
       0 0 0 1 | csr |      | CPU status register

In KERNEL MODE the following two operations allow to read and write special CPU
registers.

      sts cir r0
      lds r0 cir


CPU INFO REGISTER - CIR
--------------------------------------------------------------------------------

The CPU INFO REGISTER (CIR) contains information about the version of the CPU.

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | CPU MODEL     | CPU MAJOR REVISION     | CPU MINOR REVISION    |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                                       |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

The CPU MODEL field describes the overall architectural model. For the first
release named EPIC-0 rev. 1.0, this is going to be a three-stage pipelined CPU.
  CPU MAJOR REVISION and CPU MINOR REVISION contain the version of the CPU
revision. A change in major revision reflects a breaking change and may cause
some legacy application code to display unexpected behavior. A change in minor
revision however indicates additions and improvements to the design without
corrupting the backwards compatibility of the CPU.
  Bug-fixes may or may not introduce breaking changes and will therefore either
trigger major or minor revisions.

For EPIC-0 rev. 1.0 the register will be set to:

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0   0   0   0 | 0   0   0   0    0   1 | 0   0   0   0   0   0 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
        0   0   0   0   0   0   0   0    0   0   0   0   0   0   0   0 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

Only code with KERNEL MODE privileges can access this register.


Initialization
--------------------------------------------------------------------------------

The following listing shows the relevant portion of the CPU initialization
routine that sets the CPU INFO REGISTER with the appropriate version info:

      let CPU_MODEL          = 0
      let CPU_MAJOR_REVISION = 1
      let CPU_MINOR_REVISION = 0

      clr r0                       // Clear r0. Pseudo instr.: xor r0  r0
      oor r0  CPU_MODEL            // Fill r0 with CPU version info.
      sll r0  6
      oor r0  CPU_MAJOR_REVISION
      sll r0  6
      oor r0  CPU_MINOR_REVISION
      sll r0  16
      sts cir r0                   // Save CPU version info to CIR register.

The routine is stored in the CPU bootstrap ROM.



CPU STATE REGISTER - CSR
--------------------------------------------------------------------------------

The CPU STATE REGISTER contains the state of the CPU.

  o The COND bits 29-26 (V, C, L, E) reflect the last result of a comparison.
  o The MODE bits 2-0 define the current mode of the CPU. Each mode is connected
    to various privileges or restrictions.

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      |       | V | C | L | E |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                           | MODE      |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+


Mode Bits
--------------------------------------------------------------------------------

The MODE bits determine execution restrictions for certain instructions. A CPU
in KERNEL MODE is able to execute any instruction and can change any registers.
// TODO: Exception Mode ist wohl überflüssig.
In USER MODE, the only way to execute restricted instructions or access internal
CPU registers is a switch to KERNEL MODE via a system call instruction (sys).

       MODE  | Mode Name
      -------+----------------
       0 0 1 | Kernel
      -------+----------------
       0 1 0 | Exception
      -------+----------------
       1 0 0 | User


Condition Bits
--------------------------------------------------------------------------------

Every EPIC instruction contains a three bit condition block. Whether an
instruction will be executed will be determined by this condition block and the
corresponding condition block of the CPU STATE REGISTER.

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      |       | V | C | L | E |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

The following table lists the meanings for each bit:

       Bit | Meaning
      -----+-----------------------------------------------------------
        V  | The OVERFLOW bit is set whenever the signed comparison (CPS)
           | yields REG[RA] < REG[RB].
      -----+-----------------------------------------------------------
        C  | The CARRY bit is set whenverver the unsigned comparison (CPU)
           | yields REG[RA] < REG[RB].
      -----+-----------------------------------------------------------
        L  | The LESS bit is set whenever the last comparison operation
           | gave a result where REG[RA] < REG[RB]
      -----+-----------------------------------------------------------
        E  | The EQUAL bit is set whenever the last comparison
           | operation gave a result where REG[RA] == REG[RB]

References
--------------------------------------------------------------------------------
http://teaching.idallen.com/dat2343/10f/notes/040_overflow.txt
http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0473h/CEGBHJCJ.html


================================================================================
 INSTRUCTION CONDITIONS
================================================================================

The following conditions can be attached to any instruction:

       COND  | Mnemonic | Meaning
      -------+----------+------------------------------------------------
       0 0 0 | nv       | Never execute the instruction.
      -------+----------+------------------------------------------------
       0 0 1 | eq       | Equal
      -------+----------+------------------------------------------------
       0 1 0 | lt       | Less Than
      -------+----------+------------------------------------------------
       0 1 1 | le       | Less Equal
      -------+----------+------------------------------------------------
       1 0 0 | gt       | Greater Than
      -------+----------+------------------------------------------------
       1 0 1 | ge       | Greater Equal
      -------+----------+------------------------------------------------
       1 1 0 | ne       | Not Equal
      -------+----------+------------------------------------------------
       1 1 1 | al       | Always execute the instruction. This is the
             |          | default behavior if the essembler instruction
             |          | lacks an explicit mnemonic condition modifier.

The following is an implementation of Euclid's Greatest Common Divisor algorithm
leveraging some of the instructions:

      @Math.gcd
          cmp   r0  r1
          sublt r1  r0
          subgt r0  r1
          brane @Math.gcd
          ret

Both comparison operations cmp and cpu subtract the values from registers RA and
RB and then update the condition flags in the CSR. The condition flags of any
subsequent instruction will then be evaluated against the current state of the
CSR condition flags.

                 | nv | eq | lt | le | gt | ge | ne | al |
              ---+----+----+----+----+----+----+----+----+
               E |  0    1    0    1    0    1    0    1
              ---+
               L |  0    0    1    1    0    0    1    1
              ---+
               G |  0    0    0    0    1    1    1    1
              ---+

where G = ~L & ~E.

If an instruction should be executed will then be determined by

      X = G & INSTR[28]
        | L & INSTR[27]
        | E & INSTR[26]
        | INSTR[28] & INSTR[27] & INSTR[26]

================================================================================
 DATA PROCESSING INSTRUCTIONS
================================================================================

       ALU     | Mnemonic                ALU     | Mnemonic
      ---------+----------------------  ---------+----------------------
       0 0 0 0 | add                     1 0 0 0 |
      ---------+----------------------  ---------+----------------------
       0 0 0 1 | sub                     1 0 0 1 |
      ---------+----------------------  ---------+----------------------
       0 0 1 0 | mul                     1 0 1 0 |
      ---------+----------------------  ---------+----------------------
       0 0 1 1 | div                     1 0 1 1 |
      ---------+----------------------  ---------+----------------------
       0 1 0 0 | and                     1 1 0 0 | cps
      ---------+----------------------  ---------+----------------------
       0 1 0 1 | oor                     1 1 0 1 | cpu
      ---------+----------------------  ---------+----------------------
       0 1 1 0 | xor                     1 1 1 0 |
      ---------+----------------------  ---------+----------------------
       0 1 1 1 | nor                     1 1 1 1 | mov


       SOP | Mnemonic                    SOP | Mnemonic
      -----+--------------------------  -----+--------------------------
       0 0 | sll (<<)                    1 0 | srl (>>)
      -----+--------------------------  -----+--------------------------
       0 1 | rol (<<>)                   1 1 | sra (>>>)


signed: mul, cps
unsigned: add, sub, and, oor, xor, nor, cpu, mov, div,


Load 32 bit value:

// r0 = 0x87654321
mov r0 0x8765 << 16
oor r0 0x4321

--------------------------------------------------------------------------------
 ADD - Addition
--------------------------------------------------------------------------------

Adds the values in registers RA and RB, then stores the result in register RD.
The value in RB may be shifted or rotated beforehand.

      add{cond} rd ra rb {sop shamt}

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0   0   0 | COND      | RD                 | RA                |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | SHAMT             | SOP   | RB                 | 0   0   0   0 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

      if cond_passed(COND)
        REG[RD] = REG[RA] + shift(REG[RB], SOP, SHAMT)


Adds the values in register RA and the zero extended 8 bit immediate value
IMM8, then stores the result in register RD. The immediate value may be rotated
beforehand.

      add{cond} rd ra u8 {<<> shamt}

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0   0   1 | COND      | RD                 | RA                |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | SHAMT         | IMM8                           | 0   0   0   0 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

      if cond_passed(COND)
        REG[RD] = REG[RA] + (zero(IMM8) <<> SHAMT . 0)


Adds the zero extended 16 bit immediate value IMM16 to the value in register RD,
then stores the result in register RD again.

      add{cond} rd u16

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 1   0   0 | COND      | RD                 | 0 | IMM16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                       | 0   0   0   0 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

      if cond_passed(COND)
        REG[RD] = REG[RA] + zero(IMM16)


Adds the 16 bit immediate value IMM16 shifted to the left by 16 bit to the
value in register RD , then stores the result to register RD again.

      add{cond} rd u16 << 16

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 1   0   0 | COND      | RD                 | 1 | IMM16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                       | 0   0   0   0 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

      if cond_passed(COND)
        REG[RD] = REG[RA] + (IMM16 << 16)


--------------------------------------------------------------------------------
 SUB - Subtraction
--------------------------------------------------------------------------------

Subtracts the value in register RB from the value in register RB, then stores
the result in register RD. The value in RB may be shifted or rotated beforehand.

      sub{cond} rd ra rb {sop shamt}

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0   0   0 | COND      | RD                 | RA                |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | SHAMT             | SOP   | RB                 | 0   0   0   1 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

      if cond_passed(COND)
        REG[RD] = REG[RA] - shift(REG[RB], SOP, SHAMT)


Subtracts the zero extended 8 bit immediate value IMM8 from the value in
register RA, then stores the result in register RD. The immediate value may be
rotated beforehand.

      sub{cond} rd ra u8 {<<> shamt}

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0   0   1 | COND      | RD                 | RA                |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | SHAMT         | IMM8                           | 0   0   0   1 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

      if cond_passed(COND)
        REG[RD] = REG[RA] - (zero(IMM8) <<> SHAMT . 0)


Subtracts the zero extended 16 bit immediate value IMM16 from the value in
register RD, then stores the result in register RD again.

      sub{cond} rd u16

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 1   0   0 | COND      | RD                 | 0 | IMM16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                       | 0   0   0   1 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

      if cond_passed(COND)
        REG[RD] = REG[RA] - zero(IMM16)


Subtracts the 16 bit immediate value IMM16 shifted to the left by 16 bit from
the value in register RD, then stores the result to register RD again.

      sub{cond} rd u16 << 16

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 1   0   0 | COND      | RD                 | 1 | IMM16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                       | 0   0   0   1 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

      if cond_passed(COND)
        REG[RD] = REG[RA] - (IMM16 << 16)


--------------------------------------------------------------------------------
 CPS - Compare Signed
--------------------------------------------------------------------------------

Compares registers RA and RB, then updates the condition flags in the CSR.
The value in RB may be shifted or rotated beforehand.

      cps{cond} ra rb {sop shamt}

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0   0   0 | COND      | 0   0    0   0   0 | RA                |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | SHAMT             | SOP   | RB                 | 1   1   0   0 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

      if cond_passed(COND)
        rs := REG[RA] - shift(REG[RB], SOP, SHAMT)
        CSR[L] = rs[31] == 1
        CSR[E] = rs[31:0] == 0


--------------------------------------------------------------------------------
 CPU - Compare Unsigned
--------------------------------------------------------------------------------

Compares registers RA and RB, then updates the condition flags in the CSR.
The value in RB may be shifted or rotated beforehand.

      cpu{cond} ra rb {sop shamt}

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0   0   0 | COND      | 0   0    0   0   0 | RA                |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | SHAMT             | SOP   | RB                 | 1   1   0   1 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

      if cond_passed(COND)
        rs := REG[RA] - shift(REG[RB], SOP, SHAMT)
        CSR[L] = rs[32] == 0
        CSR[E] = rs[31:0] == 0


--------------------------------------------------------------------------------
 MOV - Move
--------------------------------------------------------------------------------

Moves the value in register RB into register RD. The value in RB may be shifted
or rotated beforehand.

      mov{cond} rd rb {sop shamt}

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0   0   0 | COND      | RD                 | 0   0   0   0   0 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | SHAMT             | SOP   | RB                 | 1   1   1   1 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

      if cond_passed(COND)
        REG[RD] = shift(REG[RB], SOP, SHAMT)

Note that bits 16-20 are reserved for future enhancements and are expected to be
zero to guarantee compatibility with upcoming ISA releases.


Moves the sign extended 12 bit immediate value IMM12 into register RD.

      mov{cond} rd s12

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0   0   1 | COND      | RD                 | 0   0   0   0   0 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | SHAMT         | IMM8                           | 1   1   1   1 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

      if cond_passed(COND)
        REG[RD] = zero(IMM8) <<> SHAMT . 0

Note that bits 16-20 are reserved for future enhancements and are expected to be
zero to guarantee compatibility with upcoming ISA releases.


Moves the 16 bit immediate value IMM16 into the lower halfword of register RD.
The upper halfword ramins untouched.

      mov{cond} rd u16

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 1   0   0 | COND      | RD                 | 0 | IMM16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                       | 1   1   1   1 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

      if cond_passed(COND)
        REG[RD] = zero(IMM16)


Moves the 16 bit immediate value IMM16 into the upper halfword of register RD.
The lower halfword remains untouched.

      mov{cond} rd u16 << 16

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 1   0   0 | COND      | RD                 | 1 | IMM16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                       | 1   1   1   1 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

      if cond_passed(COND)
        REG[RD] = IMM16 << 16


================================================================================
 MEMORY INSTRUCTIONS
================================================================================

--------------------------------------------------------------------------------
 STW - Store Word
--------------------------------------------------------------------------------

      stw{cond} rd ra[rb {sop shamt}]

      31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0   1   0 | COND      | RD                 | RA                |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | SHAMT             | SOP   | RB                 | 0   0   0 | 0 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

      if cond_passed(COND)
        adr := REG[RA] + shift(REG[RB], SOP, SHAMT)
        MEM[adr] = REG[RD]


      stw{cond} rd ra[imm12]

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0   1   1 | COND      | RD                 | RA                |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | SHAMT         | IMM8                           | 0   0   0 | 0 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

      if cond_passed(COND)
        adr := REG[RA] + (zero(IMM8) <<> SHAMT . 0)
        MEM[adr] = REG[RD]


Note, that bits 3-1 are reserved for future enhancements and are expected to be
all zeros to guarantee compatibility with upcoming ISA releases.


================================================================================
 SPECIAL REGISTER INSTRUCTIONS
================================================================================

In KERNEL MODE the following two operations allow to read and write special CPU
registers.

      sts cir r0
      lds r0 csr

// TODO: Special registers.

       Bits    | Mn. | Alt. | Role
      ---------+-----+------+-------------------------------------------
       0 0 0 0 | cir |      | CPU information register
      ---------+-----+------+-------------------------------------------
       0 0 0 1 | csr |      | CPU status register


--------------------------------------------------------------------------------
 STS - Store Special
--------------------------------------------------------------------------------

// TODO: Like STW.


--------------------------------------------------------------------------------
 LDS - Load Special
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------
 -
--------------------------------------------------------------------------------

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 1   0   1 | COND      |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                                       |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+


--------------------------------------------------------------------------------
 -
--------------------------------------------------------------------------------

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 1   1   0 | COND      |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                                       |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+


================================================================================
 BRANCH INSTRUCTIONS
================================================================================

--------------------------------------------------------------------------------
 BRA - Branch
--------------------------------------------------------------------------------

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 1   1   1 | COND      | 0 | IMM25
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                                       |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+


--------------------------------------------------------------------------------
 BRL - Branch and Link
--------------------------------------------------------------------------------

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 1   1   1 | COND      | 1 | IMM25
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                                       |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
