--------------------------------------------------------------------------------
 REGISTERS
--------------------------------------------------------------------------------

----+---------------------------------------------------------------------------
R00 | ZERO - Always zero?
R01 |
R02 |
R03 |
R04 |
R05 |
R06 |
R07 |
R08 |
R09 |
R10 |
R11 |
R12 | FP
R13 | SP
R14 | RP
R15 | IP (Instruction Pointer)

================================================================================
 SPECIAL CPU REGISTERS
================================================================================

In KERNEL MODE the following two operations allow to read and write special CPU
registers.

      ssr cir r0 
      lsr r0 cir

--------------------------------------------------------------------------------
 CPU INFO REGISTER - CIR
--------------------------------------------------------------------------------

The CPU INFO REGISTER (CIR) contains information about the version of the CPU.

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | CPU MODEL     | CPU MAJOR REVISION     | CPU MINOR REVISION    |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                                       |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

The CPU MODEL field describes the overall architectural model. For the first 
release named EPIC-0 rev. 1.0, this is going to be a three-stage pipelined CPU. 
   CPU MAJOR REVISION and CPU MINOR REVISION contain the version of the CPU 
revision. A change in major revision reflects a breaking change and may cause 
some legacy application code to display unexpected behavior. A change in minor
revision however indicates additions and improvements to the design without
corrupting the backwards compatibility of the CPU. 
   Bug-fixes may or may not introduce breaking changes and will therefore either
trigger major or minor revisions.

For EPIC-0 rev. 1.0 the register will be set to:

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0   0   0   0 | 0   0   0   0    0   1 | 0   0   0   0   0   0 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
        ?                                                              |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

Only code with KERNEL MODE privileges can access this register.


Initialization
--------------------------------------------------------------------------------

The following listing shows the relevant portion of the CPU initialization 
routine that sets the CPU INFO REGISTER with the appropriate version info:

      let CPU_MODEL          = 0
      let CPU_MAJOR_REVISION = 1
      let CPU_MINOR_REVISION = 0

      // xor r0  r0                    // Clear r0. 
      clr r0                       // Clear r0. Pseudo instr.: xor r0  r0   
      oor r0  CPU_MODEL            // Fill r0 with CPU version info.
      sll r0  6
      oor r0  CPU_MAJOR_REVISION
      sll r0  6
      oor r0  CPU_MINOR_REVISION
      sll r0  16
      ssr cir r0                   // Save CPU version info to CIR register.
      
The routine is stored in the CPU bootstrap ROM.


--------------------------------------------------------------------------------
 CPU STATE REGISTER - CSR
--------------------------------------------------------------------------------

The CPU STATE REGISTER contains the state of the CPU. 
   The COND bits 28-26 reflect the last result of a testing function or an 
operation with the SET flag enabled.
   The MODE bits 2-0 define the current mode of the CPU. Each mode is connected
to various privileges or restrictions.

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      |           | COND      | 
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                           | MODE      |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+


Mode Bits
--------------------------------------------------------------------------------

The MODE bits determine execution restrictions for certain instructions. A CPU
in KERNEL MODE is able to execute any instruction and can change any registers.
// Exception Mode ist wohl überflüssig.
In User MODE, the only way to execute restricted instructions or access internal 
CPU registers is a switch to Kernel MODE via a system call instruction (sys).

       MODE  |
      -------+----------------
       0 0 0 | Kernel MODE
      -------+----------------
       0 0 1 | Exception MODE
      -------+----------------
       0 1 0 | User MODE


Condition Bits
--------------------------------------------------------------------------------

      D <- signExt(REG[RA], 33) - signExt(REG[RB], 33)
      
      Z <- D == 0               // REG[RA] == REG[RB]
      N <- D[32] == 1           // REG[RA] < REG[RB]
      P <- ~N & ~Z              // REG[RA] > REG[RB]
      
      E <- REG[RA] == REG[RB]
      L <- REG[RA] < REG[RB]
      G <- REG[RA] > REG[RB]    // ~L & ~E
      
      V <- 
      
       COND  | Mnemonic |
      -------+----------+------------------------------------------------
       0 0 0 | nv       | Never execute the instruction. However, set CSR 
                        | condition flags if SET bit of the instruction 
                        | is enabled.
      -------+----------+------------------------------------------------
       0 0 1 | eq       | Equal
      -------+----------+------------------------------------------------
       0 1 0 | lt       | Less Than
      -------+----------+------------------------------------------------
       0 1 1 | le       | Less Equal
      -------+----------+------------------------------------------------
       1 0 0 | gt       | Greater Than
      -------+----------+------------------------------------------------
       1 0 1 | ge       | Greater Equal
      -------+----------+------------------------------------------------
       1 1 0 | ne       | Not Equal
      -------+----------+------------------------------------------------
       1 1 1 | al       | Always execute the instruction. This is the 
             |          | default behavior if the essembler instruction
             |          | lacks an explicit mnemonic condition modifier.

      C <- (| (CSR[28:26] & INSTR[28:26])) | (& INSTR[28:26])

================================================================================
 INSTRUCTION SET 
================================================================================

nop       <-> sllnv r0 r0 0   // Nothingness.
mov rd ra <-> sll   rd ra 0   // rd <- ra
clr rd    <-> xor   rd rd     // rd <- rd ^ rd (<-> rd = 0)
inv rd    <-> nor   rd rd     // rd <- ~rd
neg rd ra <-> mul   rd ra -1     // rd <- -ra
neg rd    <-> neg   rd rd
// neg rd    <-> inv   rd        // rd <- -rd
//               add   rd 1
swp ra rb <-> xor   ra rb     // ra <- ra ^ rb
              xor   rb ra     // rb <- rb ^ (ra ^ rb) <-> ra
              xor   ra rb     // ra <- (ra ^ rb) ^ ra <-> rb
              
psh <register list>
pop <register list>

// testing. Special case if cond = nv then setting the condition flags is not 
// disabled 
cmp ra rb  <-> ! subnv ra rb
cmp ra num <-> ! subnv ra num

// constant loading with ldc/lda.

// Read and Write CPU registers.

// C programming language ohne signed/unsigned? (compare unsigned cpu)

// tst ra rb <-> ! andnv ra rb ?

// ret <-> mov ip rp ? 
// Eigentlich lädt man rp vom stack direkt in ip also 
// ret <-> ldw ip sp 
// Hat allerdings einen branch delay slot.

       ALU     | Mnemonic                ALU     | Mnemonic 
      ---------+----------------------  ---------+----------------------
       0 0 0 0 | add                     1 0 0 0 | - (adu) (tauschen mit add)
      ---------+----------------------  ---------+----------------------
       0 0 0 1 | sub                     1 0 0 1 | - (sbu) (tauschen mit sub)
      ---------+----------------------  ---------+----------------------
       0 0 1 0 | mul                     1 0 1 0 | -
      ---------+----------------------  ---------+----------------------
       0 0 1 1 | div                     1 0 1 1 | -
      ---------+----------------------  ---------+----------------------
       0 1 0 0 | and                     1 1 0 0 | sll
      ---------+----------------------  ---------+----------------------
       0 1 0 1 | oor                     1 1 0 1 | rol
      ---------+----------------------  ---------+----------------------
       0 1 1 0 | xor                     1 1 1 0 | srl
      ---------+----------------------  ---------+----------------------
       0 1 1 1 | nor                     1 1 1 1 | sra      
          
--------------------------------------------------------------------------------
 DATA PROCESSING - ADD
--------------------------------------------------------------------------------

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0 | 0 | 0 | COND      | S | 0 || RD            | RA            |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | RB            | 0   0   0   0    0   0   0   0 | 0   0   0   0 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
  
      REG[RD] = REG[RA] + REG[RB]
      
       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0 | 0 | 0 | COND      | S | 1 || RD            | RA            |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+      
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | IMM12                                          | 0   0   0   0 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+      

      REG[RD] = REG[RA] + signExt(IMM12, 32)

      [!] add[cond] rd ra rb
      [!] add[cond] rd ra         <->  [!] add[cond] rd rd ra
      [!] add[cond] rd ra sImm12
      [!] add[cond] rd sImm12     <->  [!] add[cond] rd rd sImm12

--------------------------------------------------------------------------------
 DATA PROCESSING - REGISTER
--------------------------------------------------------------------------------

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0 | 0 | 0 | COND      | S | 0 || RD            | RA            |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | RB            | 0   0   0   0    0   0   0   0 | ALU           |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

Note, that bits 11-4 are reserved for future enhancements and are expected to be
all zeros to guarantee compatibility with upcoming ISA releases.

--------------------------------------------------------------------------------
 DATA PROCESSING - 12bit IMMEDIATE
--------------------------------------------------------------------------------

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0 | 0 | 0 | COND      | S | 1 || RD            | RA            |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | IMM12                                          | ALU           |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+


--------------------------------------------------------------------------------
 DATA PROCESSING - 16bit IMMEDIATE
--------------------------------------------------------------------------------

       ALU     | Mnemonic                ALU     | Mnemonic 
      ---------+----------------------  ---------+----------------------
       0 0 0 0 | add                     1 0 0 0 | - (adu) (tauschen mit add)
      ---------+----------------------  ---------+----------------------
       0 0 0 1 | sub                     1 0 0 1 | - (sbu) (tauschen mit sub)
      ---------+----------------------  ---------+----------------------
       0 0 1 0 | mul                     1 0 1 0 | -
      ---------+----------------------  ---------+----------------------
       0 0 1 1 | div                     1 0 1 1 | -
      ---------+----------------------  ---------+----------------------
       0 1 0 0 | and                     1 1 0 0 | ldc (LoaD Constant)
      ---------+----------------------  ---------+----------------------
       0 1 0 1 | oor                     1 1 0 1 | -
      ---------+----------------------  ---------+----------------------
       0 1 1 0 | xor                     1 1 1 0 | -
      ---------+----------------------  ---------+----------------------
       0 1 1 1 | nor                     1 1 1 1 | -      


       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0 | 0 | 1 | COND      | S | U || RD            | IMM16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                       | ALU           |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

If the flag U is 1 then the 16-bit immediate will be applied to the upper half
word of RD.


--------------------------------------------------------------------------------
 DATA PROCESSING - 16bit IMMEDIATE
--------------------------------------------------------------------------------


       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0 | 0 | 1 | COND      | S | 0 || RD            | IMM16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                       | 0   0   0   0 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

      REG[RD] = REG[RD] + signExt(IMM16, 32)

      [!] add[cond] rd sImm16  
      
       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0 | 0 | 1 | COND      | S | 1 || RD            | IMM16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                       | 0   0   0   0 |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

      REG[RD] = REG[RD] + (IMM16 << 16)
        
      [!] add[cond] rd sImm16 << 16


--------------------------------------------------------------------------------
 MEMORY - REGISTER
--------------------------------------------------------------------------------

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0 | 1 | 0 | COND      | S | 0 || RD            | RA            |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | RB            | 0   0   0   0    0   0   0   0 | 0   0   0 | L |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

Note, that bits 11-1 are reserved for future enhancements and are expected to be
all zeros to guarantee compatibility with upcoming ISA releases.


--------------------------------------------------------------------------------
 MEMORY - 12bit IMMEDIATE
--------------------------------------------------------------------------------

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0 | 1 | 0 | COND      | S | 1 || RD            | RA            |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | IMM12                                          | 0   0   0 | L |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+

Note, that bits 3-1 are reserved for future enhancements and are expected to be
all zeros to guarantee compatibility with upcoming ISA releases.

--------------------------------------------------------------------------------
 CO-PROCESSOR
--------------------------------------------------------------------------------

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 0 | 1 | 1 | COND      | CPID  ||
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                                       |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+


      31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
     +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
     | 0 | 1 | 1 | COND      | 
     +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
     +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                      | CPID          |
     +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+


     31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
    +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
    | 0 | 1 | 1 | COND      | 0   0 || RD            | RA            |
    +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
     15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
    +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                    || OP            | 0   0   0   0 |
    +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+


--------------------------------------------------------------------------------
 SYSCALL
--------------------------------------------------------------------------------

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 1 | 0 | 0 | COND      | IMM26
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                                       |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+


--------------------------------------------------------------------------------
 -
--------------------------------------------------------------------------------

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 1 | 0 | 1 | COND      | 
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                                       |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+


--------------------------------------------------------------------------------
 -
--------------------------------------------------------------------------------

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 1 | 1 | 0 | COND      | 
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                                       |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
            

--------------------------------------------------------------------------------
 BRANCH
--------------------------------------------------------------------------------

       31  30  29  28  27  26  25  24    23  22  21  20  19  18  17  16
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
      | 1 | 1 | 1 | COND      | L | IMM25
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
       15  14  13  12  11  10  09  08    07  06  05  04  03  02  01  00
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
                                                                       |
      +---+---+---+---+---+---+---+---++---+---+---+---+---+---+---+---+
